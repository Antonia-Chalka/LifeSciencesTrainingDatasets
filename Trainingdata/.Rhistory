saveRDS(Neutrophils, file = "D:/Documents/R/Trainingdata/data/Neutrophils.rds")
saveRDS(Plant_CO2_Uptake, file = "D:/Documents/R/Trainingdata/data/Plant_CO2_Uptake.rds")
saveRDS(Sleep_Deprivation_CSD, file = "D:/Documents/R/Trainingdata/data/Sleep_Deprivation_CSD.rds")
Brain_Bodyweight <- readRDS()'D:/Documents/R/Trainingdata/data/Brain_Bodyweight.rds'
Brain_Bodyweight <- readRDS('D:/Documents/R/Trainingdata/data/Brain_Bodyweight.rds')
plot(Brain_Bodyweight$Body.weight..kg., Brain_Bodyweight$Brain.weight..g., main = 'Scatter of Brain vs Body-weight')
#simple scatter-plot of unmodified values, not very useful therefore, using the logged data is preferable
Brain_Bodyweight <- Brain_Bodyweight[order(Brain_Bodyweight$Log.body.weight..kg.),]
#orders the data-frame by body-weight ascending
plot(x = Brain_Bodyweight$log.brain, y = Brain_Bodyweight$log.body, type = 'l', col= 'red', lwd=2, xlab = 'Log brain-weight', ylab = 'Log body-weight')
#line showing correlation between logged brain and body weight
points(x = Brain_Bodyweight$log.brain, y = Brain_Bodyweight$log.body, col = 'black', pch = 16)
#adds the points of each animals values
text(Brain_Bodyweight$log.brain, Brain_Bodyweight$log.body, labels = Brain_Bodyweight$Species, cex = 0.6, pos = 1)
#adds the species name to each point
#adds the species name to each point
#adds the species name to each point
Child_Variants <- readRDS('D:/Documents/R/Trainingdata/data/Child_Variants.rds')
mean(Child_Variants$MutantReadPercent)
#returns mean of the mutant percent column
logic.child <- Child_Variants$MutantReadPercent >=70
#logic test that informs us which values and therefore rows have mutant reads over 70%
filter.child <- Child_Variants[logic.child,]
#creates a new data-frame with just those TRUE values from the logic test preformed prior
sum(filter.child$REF == 'G')
sum(filter.child$REF == 'A')
sum(filter.child$REF == 'T')
sum(filter.child$REF == 'C')
#sums the mutation counts for each base
mutation.counts <- c(2347,2584,2616,2288)
#places the summed counts into a vector
hist(Child_Variants$MutantReadPercent, breaks = 40, main = 'Mutation frequency Histogram', ylim = c(0, 2000), xlab = 'Mutant Read Percent')
#plots the mutant reads column
boxplot(Child_Variants$MutantReadPercent)
boxplot(filter.child$MutantReadPercent)
#plots of overall distribution and the filtered set
colours.graph <- c('black','green','red','blue')
barplot(mutation.counts, col=colours.graph, names.arg = c('G','A','T','C'), ylim = c(0, 3000))
#plots the total mutation counts from the filtered subset
Childrens_Indoor_Hobbies_During_Lockdown <- readRDS('D:/Documents/R/Trainingdata/data/Childrens_Indoor_Hobbies_During_Lockdown.rds')
Childrens_Outdoor_Hobbies_During_Lockdown <- readRDS('D:/Documents/R/Trainingdata/data/Childrens_Outdoor_Hobbies_During_Lockdown.rds')
par(mfrow = c(2,1), mar = c(0,5,0,2))
#alters margins and allows for two plots to be displayed
pie(Childrens_Indoor_Hobbies_During_Lockdown$X., labels = Childrens_Indoor_Hobbies_During_Lockdown$Hobby, cex = 0.6)
pie(Childrens_Outdoor_Hobbies_During_Lockdown$X., labels = Childrens_Outdoor_Hobbies_During_Lockdown$Outdoor.Hobby, cex = 0.7)
Cuttlefish_Buoyancy <- readRDS('D:/Documents/R/Trainingdata/data/Cuttlefish_Buoyancy.rds')
Modern_Pollen_Plant_Diversity_Relationships <- readRDS('D:/Documents/R/Trainingdata/data/Modern_Pollen_Plant_Diversity_Relationships.rds')
Neutrophils <- readRDS('D:/Documents/R/Trainingdata/data/Neutrophils.rds')
Plant_CO2_Uptake <- readRDS('D:/Documents/R/Trainingdata/data/Plant_CO2_Uptake.rds')
Sleep_Deprivation_CSD <- readRDS('D:/Documents/R/Trainingdata/data/Sleep_Deprivation_CSD.rds')
devtools::check()
Neutrophils <- readRDS("~/R/Trainingdata/data/Neutrophils.rds")
View(Neutrophils)
Plant_CO2_Uptake <- readRDS("~/R/Trainingdata/data/Plant_CO2_Uptake.rds")
View(Plant_CO2_Uptake)
Neutrophils <- read.delim("~/R/Graph Data/Neutrophils.txt")
View(Neutrophils)
Neutrophils <- readRDS('D:/Documents/R/Trainingdata/data/Neutrophils.rds')
Neutrophils <- readRDS("~/R/Trainingdata/data/Neutrophils.rds")
View(Neutrophils)
Neutrophils <- read.delim("~/R/Graph Data/Neutrophils.txt")
View(Neutrophils)
saveRDS(Neutrophils, file = "D:/Documents/R/Trainingdata/data/Neutrophils.rds")
Neutrophils <- readRDS('D:/Documents/R/Trainingdata/data/Neutrophils.rds')
View(Neutrophils)
library(Trainingdata)
library(Trainingdata)
library(Trainingdata)
Brain_Bodyweight <- readRDS("~/R/Trainingdata/data/Brain_Bodyweight.rds")
View(Brain_Bodyweight)
Brain_Bodyweight <- readRDS("~/R/Trainingdata/data/Brain_Bodyweight.rds")
?Biochemical_Oxygen_Demand
library(Trainingdata)
library(Trainingdata)
library(devtools)
library(usethis)
library(devtools)
install_github("Casey-Brown/Trainingdata")
install_github("StevenWingett/LifeSciencesTrainingDatasets")
install_github("Casey-Brown/Trainingdata", subdir = "master")
library(Trainingdata)
install_github("StevenWingett/Trainingdata")
install_github("StevenWingett/LifeSciencesTrainingDatasets")
Biochemical_Oxygen_Demand <- readRDS("~/R/Trainingdata/data/Biochemical_Oxygen_Demand.rds")
Biomass_of_Herbivorous_Fish <- readRDS("~/R/Trainingdata/data/Biomass_of_Herbivorous_Fish.rds")
Bird_Sighting_Texas_2018 <- readRDS("~/R/Trainingdata/data/Bird_Sighting_Texas_2018.rds")
Brain_Bodyweight <- readRDS("~/R/Trainingdata/data/Brain_Bodyweight.rds")
Child_Variants <- readRDS("~/R/Trainingdata/data/Child_Variants.rds")
Childrens_Indoor_Hobbies_During_Lockdown <- readRDS("~/R/Trainingdata/data/Childrens_Indoor_Hobbies_During_Lockdown.rds")
Childrens_Outdoor_Hobbies_During_Lockdown <- readRDS("~/R/Trainingdata/data/Childrens_Outdoor_Hobbies_During_Lockdown.rds")
Cuttlefish_Buoyancy <- readRDS("~/R/Trainingdata/data/Cuttlefish_Buoyancy.rds")
Modern_Pollen_Plant_Diversity_Relationships <- readRDS("~/R/Trainingdata/data/Modern_Pollen_Plant_Diversity_Relationships.rds")
Neutrophils <- readRDS("~/R/Trainingdata/data/Neutrophils.rds")
Plant_CO2_Uptake <- readRDS("~/R/Trainingdata/data/Plant_CO2_Uptake.rds")
Sleep_Deprivation_CSD <- readRDS("~/R/Trainingdata/data/Sleep_Deprivation_CSD.rds")
?Cutt;efish_Buoyancy
?Cuttlefish_Buoyancy
library(Trainingdata)
?Cuttlefish_Buoyancy
library(Trainingdata)
?Cuttlefish_Buoyancy
?Biochemical_Oxygen_Demand
rdata
library(rdata)
View(data)
View(BOD)
?BOD
?CO2
library(Trainingdata)
#puts the top 10 in it's own data set
par(mar = c(4,7,4,3))
Brain_Bodyweight <- readRDS('D:/Documents/R/Trainingdata/data/Brain_Bodyweight.rds')
#Reads data, stores as variable
plot(Brain_Bodyweight$Body.weight..kg., Brain_Bodyweight$Brain.weight..g., main = 'Scatter of Brain vs Body-weight')
#simple scatter-plot of unmodified values, not very useful therefore, using the logged data is preferable
Brain_Bodyweight <- Brain_Bodyweight[order(Brain_Bodyweight$Log.body.weight..kg.),]
#orders the data-frame by body-weight ascending
plot(x = Brain_Bodyweight$log.brain, y = Brain_Bodyweight$log.body, type = 'l', col= 'red', lwd=2, xlab = 'Log brain-weight', ylab = 'Log body-weight')
#line showing correlation between logged brain and body weight
points(x = Brain_Bodyweight$log.brain, y = Brain_Bodyweight$log.body, col = 'black', pch = 16)
#adds the points of each animals values
text(Brain_Bodyweight$log.brain, Brain_Bodyweight$log.body, labels = Brain_Bodyweight$Species, cex = 0.6, pos = 1)
#Reads data, stores as variable
par(mar = c(5,5,5,5))
plot(Brain_Bodyweight$Body.weight..kg., Brain_Bodyweight$Brain.weight..g., main = 'Scatter of Brain vs Body-weight')
#simple scatter-plot of unmodified values, not very useful therefore, using the logged data is preferable
Brain_Bodyweight <- Brain_Bodyweight[order(Brain_Bodyweight$Log.body.weight..kg.),]
#orders the data-frame by body-weight ascending
plot(x = Brain_Bodyweight$log.brain, y = Brain_Bodyweight$log.body, type = 'l', col= 'red', lwd=2, xlab = 'Log brain-weight', ylab = 'Log body-weight')
#line showing correlation between logged brain and body weight
points(x = Brain_Bodyweight$log.brain, y = Brain_Bodyweight$log.body, col = 'black', pch = 16)
#adds the points of each animals values
text(Brain_Bodyweight$log.brain, Brain_Bodyweight$log.body, labels = Brain_Bodyweight$Species, cex = 0.6, pos = 1)
#Reads data, stores as variable
par(mar = c(2,2,2,2))
plot(Brain_Bodyweight$Body.weight..kg., Brain_Bodyweight$Brain.weight..g., main = 'Scatter of Brain vs Body-weight')
#simple scatter-plot of unmodified values, not very useful therefore, using the logged data is preferable
Brain_Bodyweight <- Brain_Bodyweight[order(Brain_Bodyweight$Log.body.weight..kg.),]
#orders the data-frame by body-weight ascending
plot(x = Brain_Bodyweight$log.brain, y = Brain_Bodyweight$log.body, type = 'l', col= 'red', lwd=2, xlab = 'Log brain-weight', ylab = 'Log body-weight')
#line showing correlation between logged brain and body weight
points(x = Brain_Bodyweight$log.brain, y = Brain_Bodyweight$log.body, col = 'black', pch = 16)
#adds the points of each animals values
text(Brain_Bodyweight$log.brain, Brain_Bodyweight$log.body, labels = Brain_Bodyweight$Species, cex = 0.6, pos = 1)
#Reads data, stores as variable
par(mar = c(3,3,3,3))
#orders the data-frame by body-weight ascending
plot(x = Brain_Bodyweight$log.brain, y = Brain_Bodyweight$log.body, type = 'l', col= 'red', lwd=2, xlab = 'Log brain-weight', ylab = 'Log body-weight')
#line showing correlation between logged brain and body weight
points(x = Brain_Bodyweight$log.brain, y = Brain_Bodyweight$log.body, col = 'black', pch = 16)
#adds the points of each animals values
text(Brain_Bodyweight$log.brain, Brain_Bodyweight$log.body, labels = Brain_Bodyweight$Species, cex = 0.6, pos = 1)
#orders the data-frame by body-weight ascending
plot(x = Brain_Bodyweight$log.brain, y = Brain_Bodyweight$log.body, type = 'l', col= 'red', lwd=2, xlab = 'Log brain-weight', ylab = 'Log body-weight', main = 'Brain vs Bodyweight')
#line showing correlation between logged brain and body weight
points(x = Brain_Bodyweight$log.brain, y = Brain_Bodyweight$log.body, col = 'black', pch = 16)
#adds the points of each animals values
text(Brain_Bodyweight$log.brain, Brain_Bodyweight$log.body, labels = Brain_Bodyweight$Species, cex = 0.6, pos = 1)
#Reads data, stores as variable
par(mar = c(4,4,3,3))
plot(Brain_Bodyweight$Body.weight..kg., Brain_Bodyweight$Brain.weight..g., main = 'Scatter of Brain vs Body-weight')
#simple scatter-plot of unmodified values, not very useful therefore, using the logged data is preferable
Brain_Bodyweight <- Brain_Bodyweight[order(Brain_Bodyweight$Log.body.weight..kg.),]
#orders the data-frame by body-weight ascending
plot(x = Brain_Bodyweight$log.brain, y = Brain_Bodyweight$log.body, type = 'l', col= 'red', lwd=2, xlab = 'Log brain-weight', ylab = 'Log body-weight', main = 'Brain vs Bodyweight')
#line showing correlation between logged brain and body weight
points(x = Brain_Bodyweight$log.brain, y = Brain_Bodyweight$log.body, col = 'black', pch = 16)
#adds the points of each animals values
text(Brain_Bodyweight$log.brain, Brain_Bodyweight$log.body, labels = Brain_Bodyweight$Species, cex = 0.6, pos = 1)
Child_Variants <- readRDS('D:/Documents/R/Trainingdata/data/Child_Variants.rds')
mean(Child_Variants$MutantReadPercent)
#returns mean of the mutant percent column
logic.child <- Child_Variants$MutantReadPercent >=70
#logic test that informs us which values and therefore rows have mutant reads over 70%
filter.child <- Child_Variants[logic.child,]
#creates a new data-frame with just those TRUE values from the logic test preformed prior
sum(filter.child$REF == 'G')
sum(filter.child$REF == 'A')
sum(filter.child$REF == 'T')
sum(filter.child$REF == 'C')
#sums the mutation counts for each base
mutation.counts <- c(2347,2584,2616,2288)
#places the summed counts into a vector
hist(Child_Variants$MutantReadPercent, breaks = 40, main = 'Mutation frequency Histogram', ylim = c(0, 2000), xlab = 'Mutant Read Percent')
#plots the mutant reads column
boxplot(Child_Variants$MutantReadPercent)
boxplot(filter.child$MutantReadPercent)
#plots of overall distribution and the filtered set
colours.graph <- c('black','green','red','blue')
barplot(mutation.counts, col=colours.graph, names.arg = c('G','A','T','C'), ylim = c(0, 3000))
barplot(mutation.counts, col=colours.graph, names.arg = c('G','A','T','C'), ylim = c(0, 3000), main = 'Mutation counts')
Childrens_Indoor_Hobbies_During_Lockdown <- readRDS('D:/Documents/R/Trainingdata/data/Childrens_Indoor_Hobbies_During_Lockdown.rds')
Childrens_Outdoor_Hobbies_During_Lockdown <- readRDS('D:/Documents/R/Trainingdata/data/Childrens_Outdoor_Hobbies_During_Lockdown.rds')
par(mfrow = c(2,1), mar = c(0,5,0,2))
#alters margins and allows for two plots to be displayed
pie(Childrens_Indoor_Hobbies_During_Lockdown$X., labels = Childrens_Indoor_Hobbies_During_Lockdown$Hobby, cex = 0.6)
pie(Childrens_Outdoor_Hobbies_During_Lockdown$X., labels = Childrens_Outdoor_Hobbies_During_Lockdown$Outdoor.Hobby, cex = 0.7)
Cuttlefish_Buoyancy <- readRDS('D:/Documents/R/Trainingdata/data/Cuttlefish_Buoyancy.rds')
par(mar = c(4,4,4,4), mfrow = c(1,1))
#set plot margins
#Control + Non-Fed
subset(Cuttlefish_Buoyancy, Cuttlefish_Buoyancy$treatment == 'C') -> Cuttlefish_Buoyancy.control
#isolates the cuttlefish who did not receive the CO2 treatment and were in control waters
Cuttlefish_Buoyancy.control.non <- subset(Cuttlefish_Buoyancy.control, Cuttlefish_Buoyancy.control$feeding == 0)
#further splits the data-set into those who were not fed or treated with CO2
Cuttlefish.days.non <- Cuttlefish_Buoyancy.control.non$days_until_hatching_trt
Cuttlefish.floaters.non <- Cuttlefish_Buoyancy.control.non$floating
#puts the days of the experiment and the record of floaters into their own vectors
Cuttlefish.control.non <- data.frame(Cuttlefish.days.non, Cuttlefish.floaters.non)
#creates an independent data-frame for our two newly created vectors
Cuttlefish.control.non <- Cuttlefish.control.non[order(Cuttlefish.control.non$Cuttlefish.days.non),]
#the data-frame is then sorted in order of ascending days so that time can be plotted chronologically
plot(x = Cuttlefish.control.non$Cuttlefish.days.non, y = (cumsum(Cuttlefish.control.non$Cuttlefish.floaters.non)/nrow(Cuttlefish.control.non)), type = 'l', col= 'blue', lwd=2, ylim = c(0,1), xlab = 'Days after hatching', ylab = '% Floaters')
#plots the days of the experiment against the cumulative sum of floaters, expressed as a percentage of the whole group
points(x = Cuttlefish.control.non$Cuttlefish.days.non, y = (cumsum(Cuttlefish.control.non$Cuttlefish.floaters.non)/nrow(Cuttlefish.control.non)), col = 'blue')
#Control + Fed
subset(Cuttlefish_Buoyancy, Cuttlefish_Buoyancy$treatment == 'C') -> Cuttlefish_Buoyancy.control
Cuttlefish_Buoyancy.control.fed <- subset(Cuttlefish_Buoyancy.control, Cuttlefish_Buoyancy.control$feeding == 1)
Cuttlefish.days.fed <- Cuttlefish_Buoyancy.control.fed$days_until_hatching_trt
Cuttlefish.floaters.fed <- Cuttlefish_Buoyancy.control.fed$floating
Cuttlefish.control.fed <- data.frame(Cuttlefish.days.fed, Cuttlefish.floaters.fed)
Cuttlefish.control.fed <- Cuttlefish.control.fed[order(Cuttlefish.control.fed$Cuttlefish.days.fed),]
points(x = Cuttlefish.control.fed$Cuttlefish.days.fed, y = (cumsum(Cuttlefish.control.fed$Cuttlefish.floaters.fed)/nrow(Cuttlefish.control.fed)), col = 'red')
lines(x = Cuttlefish.control.fed$Cuttlefish.days.fed, y = (cumsum(Cuttlefish.control.fed$Cuttlefish.floaters.fed)/nrow(Cuttlefish.control.fed)), col = 'red')
#Treatment + Non-Fed
subset(Cuttlefish_Buoyancy, Cuttlefish_Buoyancy$treatment == 'A') -> Cuttlefish_Buoyancy.treatment
Cuttlefish_Buoyancy.treatment.non <- subset(Cuttlefish_Buoyancy.treatment, Cuttlefish_Buoyancy.treatment$feeding == 0)
Cuttlefish.treatment.days.non <- Cuttlefish_Buoyancy.treatment.non$days_until_hatching_trt
Cuttlefish.treatment.floaters.non <- Cuttlefish_Buoyancy.treatment.non$floating
Cuttlefish.treatment.non <- data.frame(Cuttlefish.treatment.days.non, Cuttlefish.treatment.floaters.non)
Cuttlefish.treatment.non <- Cuttlefish.treatment.non[order(Cuttlefish.treatment.non$Cuttlefish.treatment.days.non),]
points(x = Cuttlefish.treatment.non$Cuttlefish.treatment.days.non, y = (cumsum(Cuttlefish.treatment.non$Cuttlefish.treatment.floaters.non)/nrow(Cuttlefish.treatment.non)), col = 'green')
lines(x = Cuttlefish.treatment.non$Cuttlefish.treatment.days.non, y = (cumsum(Cuttlefish.treatment.non$Cuttlefish.treatment.floaters.non)/nrow(Cuttlefish.treatment.non)), col = 'green')
#Treatment + Fed
subset(Cuttlefish_Buoyancy, Cuttlefish_Buoyancy$treatment == 'A') -> Cuttlefish_Buoyancy.treatment
Cuttlefish_Buoyancy.treatment.fed <- subset(Cuttlefish_Buoyancy.treatment, Cuttlefish_Buoyancy.treatment$feeding == 1)
Cuttlefish.treatment.days.fed <- Cuttlefish_Buoyancy.treatment.fed$days_until_hatching_trt
Cuttlefish.treatment.floaters.fed <- Cuttlefish_Buoyancy.treatment.fed$floating
Cuttlefish.treatment.fed <- data.frame(Cuttlefish.treatment.days.fed, Cuttlefish.treatment.floaters.fed)
Cuttlefish.treatment.fed <- Cuttlefish.treatment.fed[order(Cuttlefish.treatment.fed$Cuttlefish.treatment.days.fed),]
points(x = Cuttlefish.treatment.fed$Cuttlefish.treatment.days.fed, y = (cumsum(Cuttlefish.treatment.fed$Cuttlefish.treatment.floaters.fed)/nrow(Cuttlefish.treatment.fed)), col = 'orange')
lines(x = Cuttlefish.treatment.fed$Cuttlefish.treatment.days.fed, y = (cumsum(Cuttlefish.treatment.fed$Cuttlefish.treatment.floaters.fed)/nrow(Cuttlefish.treatment.fed)), col = 'orange')
grid(nx = NULL, col = "lightgray", lty = "dotted",lwd = par("lwd"), equilogs = TRUE)
#Adds a faint grid behind line for greater readability
legend(5, 0.9, legend = c('C+NF','C+F','T+NF','T+F'), col = c('blue','red','green','orange'), pch=15)
View(Modern_Pollen_Plant_Diversity_Relationships)
Modern_Pollen_Plant_Diversity_Relationships <- readRDS('D:/Documents/R/Trainingdata/data/Modern_Pollen_Plant_Diversity_Relationships.rds')
#Reads data into environment for use
Woody.data <- subset(Modern_Pollen_Plant_Diversity_Relationships, Modern_Pollen_Plant_Diversity_Relationships$Growth.form == 'Woody')
#filters all woodland entries into it's own data frame
Herb.data <- subset(Modern_Pollen_Plant_Diversity_Relationships, Modern_Pollen_Plant_Diversity_Relationships$Growth.form == 'Herbaceous')
#does the same filtering but with the herbaceous data this time
min <- 0
max <- 1500
#sets variables for use in plot limits
plot(x = Herb.data$Clonality, y = Herb.data$Seed.weight..mg., main = 'Does clonality affect seed weight', xlab = 'Clonality', ylab = 'Log Seed weight (mg)', pch = 19, frame = FALSE, col = 'red', xlim = c(0, 1), ylim = c(min, log10(max)))
plot(x = Woody.data$Clonality, y = Woody.data$Seed.weight..mg., main = 'Does clonality affect seed weight', xlab = 'Clonality', ylab = 'Log Seed weight (mg)', pch = 19, frame = FALSE, col = 'blue', xlim = c(0, 1), ylim = c(0, log(2700)))
Modern_Pollen_Plant_Diversity_Relationships <- readRDS('D:/Documents/R/Trainingdata/data/Modern_Pollen_Plant_Diversity_Relationships.rds')
#Reads data into environment for use
Woody.data <- subset(Modern_Pollen_Plant_Diversity_Relationships, Modern_Pollen_Plant_Diversity_Relationships$Growth.form == 'Woody')
#filters all woodland entries into it's own data frame
Herb.data <- subset(Modern_Pollen_Plant_Diversity_Relationships, Modern_Pollen_Plant_Diversity_Relationships$Growth.form == 'Herbaceous')
View(Modern_Pollen_Plant_Diversity_Relationships)
Modern_Pollen_Plant_Diversity_Relationships <- read.delim("~/R/Graph Data/Modern_Pollen_Plant_Diversity_Relationships.txt")
View(Modern_Pollen_Plant_Diversity_Relationships)
use_data(Modern_Pollen_Plant_Diversity_Relationships)
saveRDS(Modern_Pollen_Plant_Diversity_Relationships)
saveRDS(Modern_Pollen_Plant_Diversity_Relationships, file = "D:/Documents/R/Trainingdata/data/Modern_Pollen_Plant_Diversity_Relationships.rds")
Modern_Pollen_Plant_Diversity_Relationships <- readRDS('D:/Documents/R/Trainingdata/data/Modern_Pollen_Plant_Diversity_Relationships.rds')
#Reads data into environment for use
Woody.data <- subset(Modern_Pollen_Plant_Diversity_Relationships, Modern_Pollen_Plant_Diversity_Relationships$Growth.form == 'Woody')
#filters all woodland entries into it's own data frame
Herb.data <- subset(Modern_Pollen_Plant_Diversity_Relationships, Modern_Pollen_Plant_Diversity_Relationships$Growth.form == 'Herbaceous')
#does the same filtering but with the herbaceous data this time
min <- 0
max <- 1500
#sets variables for use in plot limits
plot(x = Herb.data$Clonality, y = Herb.data$Seed.weight..mg., main = 'Does clonality affect seed weight', xlab = 'Clonality', ylab = 'Log Seed weight (mg)', pch = 19, frame = FALSE, col = 'red', xlim = c(0, 1), ylim = c(min, log10(max)))
plot(x = Woody.data$Clonality, y = Woody.data$Seed.weight..mg., main = 'Does clonality affect seed weight', xlab = 'Clonality', ylab = 'Log Seed weight (mg)', pch = 19, frame = FALSE, col = 'blue', xlim = c(0, 1), ylim = c(0, log(2700)))
#sets variables for use in plot limits
par(mar = c(5,5,3,3), mfrow = c(2,1))
plot(x = Herb.data$Clonality, y = Herb.data$Seed.weight..mg., main = 'Does clonality affect seed weight', xlab = 'Clonality', ylab = 'Log Seed weight (mg)', pch = 19, frame = FALSE, col = 'red', xlim = c(0, 1), ylim = c(min, log10(max)))
plot(x = Woody.data$Clonality, y = Woody.data$Seed.weight..mg., main = 'Does clonality affect seed weight', xlab = 'Clonality', ylab = 'Log Seed weight (mg)', pch = 19, frame = FALSE, col = 'blue', xlim = c(0, 1), ylim = c(0, log(2700)))
Neutrophils <- readRDS('D:/Documents/R/Trainingdata/data/Neutrophils.rds')
#reads .rds file into global environment
par(mfrow = c(1,1))
boxplot(Neutrophils, main='Neutrophils')
#presents the data of each chemicals effect on the white blood cells
barplot(colMeans(Neutrophils, na.rm = TRUE, dims = 1))
#presents the data of each chemicals effect on the white blood cells
barplot(colMeans(Neutrophils, na.rm = TRUE, dims = 1), ylim = c(0,120))
Plant_CO2_Uptake <- readRDS('D:/Documents/R/Trainingdata/data/Plant_CO2_Uptake.rds')
Quebec.data <- subset(Plant_CO2_Uptake, Plant_CO2_Uptake$Type == 'Quebec')
Mississippi.data <- subset(Plant_CO2_Uptake, Plant_CO2_Uptake$Type == 'Mississippi')
Quebec.chilled <- subset(Quebec.data, Quebec.data$Treatment == 'chilled')
Quebec.nonchilled <- subset(Quebec.data, Quebec.data$Treatment == 'nonchilled')
Mississippi.chilled <- subset(Mississippi.data, Mississippi.data$Treatment == 'chilled')
Mississippi.nonchilled <- subset(Mississippi.data, Mississippi.data$Treatment == 'nonchilled')
Quebec.chilled <- Quebec.chilled[order(Quebec.chilled$Plant),]
Quebec.nonchilled <- Quebec.nonchilled[order(Quebec.nonchilled$Plant),]
Mississippi.chilled <- Mississippi.chilled[order(Mississippi.chilled$uptake),]
Mississippi.nonchilled <- Mississippi.nonchilled[order(Mississippi.nonchilled$uptake),]
barplot(Quebec.chilled$uptake, names.arg = Quebec.chilled$Plant, main = 'Quebec chill treatment',cex.names = 0.8, las = 2)
par(mar = c(5,5,3,1))
barplot(Quebec.nonchilled$uptake, names.arg = Quebec.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Quebec non-chilled treatment')
par(mar = c(3,5,3,1))
barplot(Quebec.nonchilled$uptake, names.arg = Quebec.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Quebec non-chilled treatment')
par(mar = c(3,3,3,1))
barplot(Quebec.nonchilled$uptake, names.arg = Quebec.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Quebec non-chilled treatment')
par(mar = c(3,3,3,1))
barplot(Quebec.chilled$uptake, names.arg = Quebec.chilled$Plant, main = 'Quebec chill treatment',cex.names = 0.8, las = 2)
barplot(Quebec.nonchilled$uptake, names.arg = Quebec.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Quebec non-chilled treatment')
plot(x = Quebec.nonchilled$conc, y = Quebec.nonchilled$uptake, col = 'red')
points(x = Quebec.chilled$conc, y = Quebec.chilled$uptake, col = 'blue')
text(Quebec.nonchilled$conc, y = Quebec.nonchilled$uptak, labels = Quebec.nonchilled$Plant, col = 'red', cex = 0.7, pos = 2)
text(x = Quebec.chilled$conc, y = Quebec.chilled$uptake, labels = Quebec.chilled$Plant, col = 'blue', cex = 0.7, pos = 2)
par(mar = c(3,3,3,1), mfrow = c(2,1))
barplot(Quebec.chilled$uptake, names.arg = Quebec.chilled$Plant, main = 'Quebec chill treatment',cex.names = 0.8, las = 2)
barplot(Quebec.nonchilled$uptake, names.arg = Quebec.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Quebec non-chilled treatment')
barplot(Mississippi.chilled$uptake, names.arg = Mississippi.chilled$Plant, main = 'Mississippi chill treatment',cex.names = 0.8, las = 2)
barplot(Mississippi.nonchilled$uptake, names.arg = Mississippi.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Mississippi non-chilled treatment')
par(mar = c(3,3,3,1), mfrow = c(2,1))
barplot(Quebec.chilled$uptake, names.arg = Quebec.chilled$Plant, main = 'Quebec chill treatment',cex.names = 0.8, las = 2)
barplot(Quebec.nonchilled$uptake, names.arg = Quebec.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Quebec non-chilled treatment')
barplot(Mississippi.chilled$uptake, names.arg = Mississippi.chilled$Plant, main = 'Mississippi chill treatment',cex.names = 0.8, las = 2)
barplot(Mississippi.nonchilled$uptake, names.arg = Mississippi.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Mississippi non-chilled treatment')
Quebec.chilled <- Quebec.chilled[order(Quebec.chilled$Plant),]
Quebec.nonchilled <- Quebec.nonchilled[order(Quebec.nonchilled$Plant),]
Mississippi.chilled <- Mississippi.chilled[order(Mississippi.chilled$Plant),]
Mississippi.nonchilled <- Mississippi.nonchilled[order(Mississippi.nonchilled$Plant),]
par(mar = c(3,3,3,1), mfrow = c(2,1))
barplot(Quebec.chilled$uptake, names.arg = Quebec.chilled$Plant, main = 'Quebec chill treatment',cex.names = 0.8, las = 2)
barplot(Quebec.nonchilled$uptake, names.arg = Quebec.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Quebec non-chilled treatment')
barplot(Mississippi.chilled$uptake, names.arg = Mississippi.chilled$Plant, main = 'Mississippi chill treatment',cex.names = 0.8, las = 2)
barplot(Mississippi.nonchilled$uptake, names.arg = Mississippi.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Mississippi non-chilled treatment')
#Groups these filtered data sets by the plant
par(mar = c(3,3,3,1), mfrow = c(2,2))
#modifies plot margins and display
barplot(Quebec.chilled$uptake, names.arg = Quebec.chilled$Plant, main = 'Quebec chill treatment',cex.names = 0.8, las = 2)
barplot(Quebec.nonchilled$uptake, names.arg = Quebec.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Quebec non-chilled treatment')
barplot(Mississippi.chilled$uptake, names.arg = Mississippi.chilled$Plant, main = 'Mississippi chill treatment',cex.names = 0.8, las = 2)
barplot(Mississippi.nonchilled$uptake, names.arg = Mississippi.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Mississippi non-chilled treatment')
#modifies plot margins and display
barplot(Quebec.chilled$uptake, names.arg = Quebec.chilled$Plant, main = 'Quebec chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50))
barplot(Quebec.nonchilled$uptake, names.arg = Quebec.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Quebec non-chilled treatment', ylim = c(0,50))
barplot(Mississippi.chilled$uptake, names.arg = Mississippi.chilled$Plant, main = 'Mississippi chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50))
barplot(Mississippi.nonchilled$uptake, names.arg = Mississippi.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Mississippi non-chilled treatment', ylim = c(0,50))
#modifies plot margins and display
barplot(Quebec.chilled$uptake, names.arg = Quebec.chilled$Plant, main = 'Quebec chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50))
barplot(Quebec.nonchilled$uptake, names.arg = Quebec.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Quebec non-chilled treatment', ylim = c(0,50))
barplot(Mississippi.chilled$uptake, names.arg = Mississippi.chilled$Plant, main = 'Mississippi chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50), cex = 0.8)
barplot(Mississippi.chilled$uptake, names.arg = Mississippi.chilled$Plant, main = 'Mississippi chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50), cex.main = 0.8)
#modifies plot margins and display
barplot(Quebec.chilled$uptake, names.arg = Quebec.chilled$Plant, main = 'Quebec chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50))
barplot(Quebec.nonchilled$uptake, names.arg = Quebec.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Quebec non-chilled treatment', ylim = c(0,50))
barplot(Mississippi.chilled$uptake, names.arg = Mississippi.chilled$Plant, main = 'Mississippi chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50), cex.main = 0.8)
barplot(Mississippi.nonchilled$uptake, names.arg = Mississippi.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Mississippi non-chilled treatment', ylim = c(0,50), cex.main = 0.8)
#Groups these filtered data sets by the plant
par(mar = c(3,3,3,3), mfrow = c(2,2))
#modifies plot margins and display
barplot(Quebec.chilled$uptake, names.arg = Quebec.chilled$Plant, main = 'Quebec chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50))
barplot(Quebec.nonchilled$uptake, names.arg = Quebec.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Quebec non-chilled treatment', ylim = c(0,50))
barplot(Mississippi.chilled$uptake, names.arg = Mississippi.chilled$Plant, main = 'Mississippi chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50), cex.main = 0.8)
barplot(Mississippi.nonchilled$uptake, names.arg = Mississippi.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Mississippi non-chilled treatment', ylim = c(0,50), cex.main = 0.8)
#modifies plot margins and display
barplot(Quebec.chilled$uptake, names.arg = Quebec.chilled$Plant, main = 'Quebec chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50))
barplot(Quebec.nonchilled$uptake, names.arg = Quebec.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Quebec non-chilled treatment', ylim = c(0,50), cex.main = 0.8)
barplot(Mississippi.chilled$uptake, names.arg = Mississippi.chilled$Plant, main = 'Mississippi chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50), cex.main = 0.8)
barplot(Mississippi.nonchilled$uptake, names.arg = Mississippi.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Mississippi non-chilled treatment', ylim = c(0,50), cex.main = 0.8)
#modifies plot margins and display
barplot(Quebec.chilled$uptake, names.arg = Quebec.chilled$Plant, main = 'Quebec chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50), col = 'red')
#modifies plot margins and display
barplot(Quebec.chilled$uptake, names.arg = Quebec.chilled$Plant, main = 'Quebec chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50), col = 'light blue')
#modifies plot margins and display
barplot(Quebec.chilled$uptake, names.arg = Quebec.chilled$Plant, main = 'Quebec chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50), col = 'light blue')
#modifies plot margins and display
barplot(Quebec.chilled$uptake, names.arg = Quebec.chilled$Plant, main = 'Quebec chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50), col = 'light blue')
barplot(Quebec.nonchilled$uptake, names.arg = Quebec.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Quebec non-chilled treatment', ylim = c(0,50), cex.main = 0.8)
barplot(Mississippi.nonchilled$uptake, names.arg = Mississippi.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Mississippi non-chilled treatment', ylim = c(0,50), cex.main = 0.8, col = 'dark red')
barplot(Mississippi.nonchilled$uptake, names.arg = Mississippi.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Mississippi non-chilled treatment', ylim = c(0,50), cex.main = 0.8, col = 'dark red')
barplot(Mississippi.nonchilled$uptake, names.arg = Mississippi.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Mississippi non-chilled treatment', ylim = c(0,50), cex.main = 0.8, col = 'dark red')
#modifies plot margins and display
barplot(Quebec.chilled$uptake, names.arg = Quebec.chilled$Plant, main = 'Quebec chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50), col = 'light blue')
barplot(Quebec.nonchilled$uptake, names.arg = Quebec.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Quebec non-chilled treatment', ylim = c(0,50), cex.main = 0.8, col = 'light red')
barplot(Mississippi.chilled$uptake, names.arg = Mississippi.chilled$Plant, main = 'Mississippi chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50), cex.main = 0.8, col = 'dark blue')
barplot(Mississippi.nonchilled$uptake, names.arg = Mississippi.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Mississippi non-chilled treatment', ylim = c(0,50), cex.main = 0.8, col = 'dark red')
plot(x = Quebec.nonchilled$conc, y = Quebec.nonchilled$uptake, col = 'red')
#Groups these filtered data sets by the plant
par(mar = c(3,3,3,3), mfrow = c(2,2))
#modifies plot margins and display
barplot(Quebec.chilled$uptake, names.arg = Quebec.chilled$Plant, main = 'Quebec chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50), col = 'light blue')
barplot(Quebec.nonchilled$uptake, names.arg = Quebec.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Quebec non-chilled treatment', ylim = c(0,50), cex.main = 0.8, col = 'light red')
barplot(Quebec.nonchilled$uptake, names.arg = Quebec.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Quebec non-chilled treatment', ylim = c(0,50), cex.main = 0.8, col = 'red')
barplot(Mississippi.chilled$uptake, names.arg = Mississippi.chilled$Plant, main = 'Mississippi chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50), cex.main = 0.8, col = 'dark blue')
barplot(Mississippi.nonchilled$uptake, names.arg = Mississippi.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Mississippi non-chilled treatment', ylim = c(0,50), cex.main = 0.8, col = 'dark red')
#Groups these filtered data sets by the plant
par(mar = c(3,3,3,3), mfrow = c(2,2))
#modifies plot margins and display
barplot(Quebec.chilled$uptake, names.arg = Quebec.chilled$Plant, main = 'Quebec chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50), col = 'light blue')
barplot(Quebec.nonchilled$uptake, names.arg = Quebec.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Quebec non-chilled treatment', ylim = c(0,50), cex.main = 0.8, col = 'red')
barplot(Mississippi.chilled$uptake, names.arg = Mississippi.chilled$Plant, main = 'Mississippi chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50), cex.main = 0.8, col = 'dark blue')
barplot(Mississippi.nonchilled$uptake, names.arg = Mississippi.nonchilled$Plant, cex.names = 0.8, las = 2, main = 'Mississippi non-chilled treatment', ylim = c(0,50), cex.main = 0.8, col = 'dark red')
barplot(Mississippi.chilled$uptake, names.arg = Mississippi.chilled$Plant, main = 'Mississippi chill treatment',cex.names = 0.8, las = 2, ylim = c(0,50), cex.main = 0.8, col = 'blue')
#Plots all recorded CO2 uptake for each plant, variation across type and treatment seen
plot(x = Quebec.nonchilled$conc, y = Quebec.nonchilled$uptake, col = 'red')
#Plots all recorded CO2 uptake for each plant, variation across type and treatment seen
par(mar = c(4,4,4,4), mfrow = c(1,1))
plot(x = Quebec.nonchilled$conc, y = Quebec.nonchilled$uptake, col = 'red')
points(x = Quebec.chilled$conc, y = Quebec.chilled$uptake, col = 'blue')
points(x = Mississippi.chilled$conc, y = Mississippi.chilled$uptake, col = 'green')
points(x = Mississippi.nonchilled$conc, y = Mississippi.nonchilled$uptake, col = 'orange')
#Plots all recorded CO2 uptake for each plant, variation across type and treatment seen
par(mar = c(4,4,4,4), mfrow = c(1,1))
plot(x = Quebec.nonchilled$conc, y = Quebec.nonchilled$uptake, col = 'red')
points(x = Quebec.chilled$conc, y = Quebec.chilled$uptake, col = 'blue')
lines(x = Quebec.chilled$conc, y = Quebec.chilled$uptake, col = 'blue')
points(x = Mississippi.chilled$conc, y = Mississippi.chilled$uptake, col = 'green')
lines(x = Mississippi.chilled$conc, y = Mississippi.chilled$uptake, col = 'green')
points(x = Mississippi.nonchilled$conc, y = Mississippi.nonchilled$uptake, col = 'orange')
lines(x = Mississippi.nonchilled$conc, y = Mississippi.nonchilled$uptake, col = 'orange')
plot(x = Quebec.nonchilled$conc, y = Quebec.nonchilled$uptake, col = 'red', pch = 16)
points(x = Quebec.chilled$conc, y = Quebec.chilled$uptake, col = 'blue', pch = 16)
points(x = Mississippi.chilled$conc, y = Mississippi.chilled$uptake, col = 'green', pch = 16)
points(x = Mississippi.nonchilled$conc, y = Mississippi.nonchilled$uptake, col = 'orange', pch = 16)
#Plots all recorded CO2 uptake for each plant, variation across type and treatment seen
par(mar = c(4,4,1,1), mfrow = c(1,1))
plot(x = Quebec.nonchilled$conc, y = Quebec.nonchilled$uptake, col = 'red', pch = 16)
points(x = Quebec.chilled$conc, y = Quebec.chilled$uptake, col = 'blue', pch = 16)
points(x = Mississippi.chilled$conc, y = Mississippi.chilled$uptake, col = 'green', pch = 16)
points(x = Mississippi.nonchilled$conc, y = Mississippi.nonchilled$uptake, col = 'orange', pch = 16)
text(x = Quebec.nonchilled$conc, y = Quebec.nonchilled$uptak, labels = Quebec.nonchilled$Plant, col = 'red', cex = 0.7, pos = 2)
text(x = Quebec.chilled$conc, y = Quebec.chilled$uptake, labels = Quebec.chilled$Plant, col = 'blue', cex = 0.7, pos = 2)
text(x = Mississippi.chilled$conc, y = Mississippi.chilled$uptake, labels = Mississippi.chilled$Plant, col = 'green', cex = 0.7, pos = 2)
text(x = Mississippi.nonchilled$conc, y = Mississippi.nonchilled$uptake, labels = Mississippi.chilled$Plant, col = 'orange', cex = 0.7, pos = 2)
#Plots all recorded CO2 uptake for each plant, variation across type and treatment seen
par(mar = c(4,4,1,1), mfrow = c(1,1))
plot(x = Quebec.nonchilled$conc, y = Quebec.nonchilled$uptake, col = 'red', pch = 16)
points(x = Quebec.chilled$conc, y = Quebec.chilled$uptake, col = 'blue', pch = 16)
points(x = Mississippi.chilled$conc, y = Mississippi.chilled$uptake, col = 'green', pch = 16)
points(x = Mississippi.nonchilled$conc, y = Mississippi.nonchilled$uptake, col = 'orange', pch = 16)
text(x = Quebec.nonchilled$conc, y = Quebec.nonchilled$uptak, labels = Quebec.nonchilled$Plant, col = 'red', cex = 0.5, pos = 2)
text(x = Quebec.chilled$conc, y = Quebec.chilled$uptake, labels = Quebec.chilled$Plant, col = 'blue', cex = 0.5, pos = 2)
text(x = Mississippi.chilled$conc, y = Mississippi.chilled$uptake, labels = Mississippi.chilled$Plant, col = 'green', cex = 0.5, pos = 2)
text(x = Mississippi.nonchilled$conc, y = Mississippi.nonchilled$uptake, labels = Mississippi.chilled$Plant, col = 'orange', cex = 0.5, pos = 2)
plot(x = Quebec.nonchilled$conc, y = Quebec.nonchilled$uptake, col = 'red', pch = 16, xlab = 'Uptake', ylab = 'Concentration')
points(x = Quebec.chilled$conc, y = Quebec.chilled$uptake, col = 'blue', pch = 16)
points(x = Mississippi.chilled$conc, y = Mississippi.chilled$uptake, col = 'green', pch = 16)
points(x = Mississippi.nonchilled$conc, y = Mississippi.nonchilled$uptake, col = 'orange', pch = 16)
text(x = Quebec.nonchilled$conc, y = Quebec.nonchilled$uptak, labels = Quebec.nonchilled$Plant, col = 'red', cex = 0.5, pos = 2)
text(x = Quebec.chilled$conc, y = Quebec.chilled$uptake, labels = Quebec.chilled$Plant, col = 'blue', cex = 0.5, pos = 2)
text(x = Mississippi.chilled$conc, y = Mississippi.chilled$uptake, labels = Mississippi.chilled$Plant, col = 'green', cex = 0.5, pos = 2)
text(x = Mississippi.nonchilled$conc, y = Mississippi.nonchilled$uptake, labels = Mississippi.chilled$Plant, col = 'orange', cex = 0.5, pos = 2)
Sleep_Deprivation_CSD <- readRDS('D:/Documents/R/Trainingdata/data/Sleep_Deprivation_CSD.rds')
#reads the stored .rds file into a data frame in the global environment
barplot(Sleep_Deprivation_CSD$Mean.CSD.Threshold, names.arg = Sleep_Deprivation_CSD$Group, cex.names = 1)
Sleep_Deprivation_CSD <- readRDS('D:/Documents/R/Trainingdata/data/Sleep_Deprivation_CSD.rds')
#reads the stored .rds file into a data frame in the global environment
barplot(Sleep_Deprivation_CSD$Mean.CSD.Threshold, names.arg = Sleep_Deprivation_CSD$Group, cex.names = 0.9)
#reads the stored .rds file into a data frame in the global environment
par(mar = c(2,2,2,2))
barplot(Sleep_Deprivation_CSD$Mean.CSD.Threshold, names.arg = Sleep_Deprivation_CSD$Group, cex.names = 0.9)
#reads the stored .rds file into a data frame in the global environment
par(mar = c(3,3,2,2))
barplot(Sleep_Deprivation_CSD$Mean.CSD.Threshold, names.arg = Sleep_Deprivation_CSD$Group, cex.names = 0.9)
#reads the stored .rds file into a data frame in the global environment
par(mar = c(3,3,2,1))
barplot(Sleep_Deprivation_CSD$Mean.CSD.Threshold, names.arg = Sleep_Deprivation_CSD$Group, cex.names = 0.9)
barplot(Sleep_Deprivation_CSD$Mean.CSD.Threshold, names.arg = Sleep_Deprivation_CSD$Group, cex.names = 0.7)
barplot(Sleep_Deprivation_CSD$Mean.CSD.Threshold, names.arg = Sleep_Deprivation_CSD$Group, cex.names = 0.6)
barplot(Sleep_Deprivation_CSD$Mean.CSD.Threshold, names.arg = Sleep_Deprivation_CSD$Group, cex.names = 0.5)
barplot(Sleep_Deprivation_CSD$Mean.CSD.Threshold, names.arg = Sleep_Deprivation_CSD$Group, cex.names = 0.5, las = 1)
#reads the stored .rds file into a data frame in the global environment
par(mar = c(3,3,2,1))
barplot(Sleep_Deprivation_CSD$Mean.CSD.Threshold, names.arg = Sleep_Deprivation_CSD$Group, cex.names = 0.5, las = 1)
barplot(Sleep_Deprivation_CSD$Mean.CSD.Threshold, names.arg = Sleep_Deprivation_CSD$Group, cex.names = 0.8, las = 2)
#reads the stored .rds file into a data frame in the global environment
par(mar = c(5,3,2,1))
barplot(Sleep_Deprivation_CSD$Mean.CSD.Threshold, names.arg = Sleep_Deprivation_CSD$Group, cex.names = 0.8, las = 2)
barplot(Sleep_Deprivation_CSD$Mean.CSD.Threshold, names.arg = Sleep_Deprivation_CSD$Group, cex.names = 0.6, las = 2)
#reads the stored .rds file into a data frame in the global environment
par(mar = c(7,3,2,1))
barplot(Sleep_Deprivation_CSD$Mean.CSD.Threshold, names.arg = Sleep_Deprivation_CSD$Group, cex.names = 0.6, las = 2)
barplot(Sleep_Deprivation_CSD$Mean.CSD.Threshold, names.arg = Sleep_Deprivation_CSD$Group, cex.names = 0.8, las = 2)
#reads the stored .rds file into a data frame in the global environment
par(mar = c(8,3,2,1))
barplot(Sleep_Deprivation_CSD$Mean.CSD.Threshold, names.arg = Sleep_Deprivation_CSD$Group, cex.names = 0.8, las = 2)
library(Trainingdata)
Biochemical_Oxygen_Demand <- readRDS('Biochemical_Oxygen_Demand.rds')
setwd("~/R/Trainingdata")
Biochemical_Oxygen_Demand <- readRDS('Biochemical_Oxygen_Demand.rds')
setwd("~/R/Trainingdata/data")
Biochemical_Oxygen_Demand <- readRDS('Biochemical_Oxygen_Demand.rds')
library(Trainingdata)
install_github("StevenWingett/LifeSciencesTrainingDatasets")
https://github.com/StevenWingett/LifeSciencesTrainingDatasets.git
install.packages(https://github.com/StevenWingett/LifeSciencesTrainingDatasets.git)
install_github(https://github.com/StevenWingett/LifeSciencesTrainingDatasets.git)
install_github("StevenWingett/LifeSciencesTrainingDatasets")
install_github("StevenWingett/LifeSciencesTrainingDatasets")
install.packages("githubinstall")
library(installgithub)
library(githubinstall)
githubinstall::("Trainingdata")
githubinstall::"Trainingdata"
githubinstall::Trainingdata
githubinstall::gh_install_packages("Trainingdata")
githubinstall::gh_install_packages("LifeSciencesTrainingDatasets")
library(Trainingdata)
install.packages("D:/Downloads/LifeSciencesTrainingDatasets-master.zip", repos = NULL, type = "win.binary")
setInternet2(TRUE)
install.packages("D:/Downloads/LifeSciencesTrainingDatasets-master.zip", repos = NULL, type = "win.binary")
setwd("~/Trainingdata/data")
